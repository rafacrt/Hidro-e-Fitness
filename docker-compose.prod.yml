services:
  db:
    image: postgres:16
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-hidrofitness}
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./db/data-init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 5s
      timeout: 5s
      retries: 10

  hasura:
    image: hasura/graphql-engine:v2.38.0
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-hidrofitness}
      HASURA_GRAPHQL_ENABLE_CONSOLE: 'false'
      HASURA_GRAPHQL_DEV_MODE: 'false'
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, query-log
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_ADMIN_SECRET}
      HASURA_GRAPHQL_JWT_SECRET: >-
        {"type":"HS256","key":"${JWT_SECRET}"}
      HASURA_GRAPHQL_UNAUTHORIZED_ROLE: anonymous

  app:
    build:
      context: .
      dockerfile: docker-config/Dockerfile
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      hasura:
        condition: service_started
    environment:
      NODE_ENV: production
      NEXT_TELEMETRY_DISABLED: '1'
      HASURA_GRAPHQL_ENDPOINT: http://hasura:8080/v1/graphql
      HASURA_ADMIN_SECRET: ${HASURA_ADMIN_SECRET}
      JWT_SECRET: ${JWT_SECRET}
      FILE_STORAGE_DIR: /app/storage
      DB_HOST: db
      DB_USER: ${POSTGRES_USER:-postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_NAME: ${POSTGRES_DB:-hidrofitness}
    volumes:
      - storage:/app/storage
    ports:
      - "9002:9002"

volumes:
  db_data:
  storage: