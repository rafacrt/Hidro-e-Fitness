services:
  # Database for system data (users, academy_settings)
  # Backup: Weekly SQL dumps, keep last 3 versions
  db_system:
    image: postgres:16
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_SYSTEM_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_SYSTEM_PASSWORD}
      POSTGRES_DB: ${DB_SYSTEM_NAME:-hidro_system}
    volumes:
      - db_system_data:/var/lib/postgresql/data
      - ./db/system-init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres || pg_isready"]
      interval: 5s
      timeout: 5s
      retries: 10

  # Database for transactional data (students, payments, etc)
  # Backup: Daily JSON exports, keep last 3 versions
  db_data:
    image: postgres:16
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_DATA_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_DATA_PASSWORD}
      POSTGRES_DB: ${DB_DATA_NAME:-hidro_data}
    volumes:
      - db_data_data:/var/lib/postgresql/data
      - ./db/data-init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres || pg_isready"]
      interval: 5s
      timeout: 5s
      retries: 10

  hasura:
    image: hasura/graphql-engine:v2.38.0
    restart: unless-stopped
    depends_on:
      db_system:
        condition: service_healthy
      db_data:
        condition: service_healthy
    environment:
      # Primary database (system) - usando variÃ¡veis separadas para evitar problemas com caracteres especiais
      PG_DATABASE_URL: postgres://${DB_SYSTEM_USER}:${DB_SYSTEM_PASSWORD}@db_system:5432/${DB_SYSTEM_NAME}
      HASURA_GRAPHQL_DATABASE_URL: postgres://${DB_SYSTEM_USER}:${DB_SYSTEM_PASSWORD}@db_system:5432/${DB_SYSTEM_NAME}
      HASURA_GRAPHQL_ENABLE_CONSOLE: 'false'
      HASURA_GRAPHQL_DEV_MODE: 'false'
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, query-log
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_ADMIN_SECRET}
      HASURA_GRAPHQL_JWT_SECRET: >-
        {"type":"HS256","key":"${JWT_SECRET}"}
      HASURA_GRAPHQL_UNAUTHORIZED_ROLE: anonymous

  app:
    build:
      context: .
      dockerfile: docker-config/Dockerfile
    restart: unless-stopped
    depends_on:
      db_system:
        condition: service_healthy
      db_data:
        condition: service_healthy
      hasura:
        condition: service_started
    environment:
      NODE_ENV: production
      NEXT_TELEMETRY_DISABLED: '1'
      HASURA_GRAPHQL_ENDPOINT: http://hasura:8080/v1/graphql
      HASURA_ADMIN_SECRET: ${HASURA_ADMIN_SECRET}
      JWT_SECRET: ${JWT_SECRET}
      FILE_STORAGE_DIR: /app/storage
      # System database connection (users, academy_settings)
      DB_SYSTEM_HOST: db_system
      DB_SYSTEM_USER: ${DB_SYSTEM_USER}
      DB_SYSTEM_PASSWORD: ${DB_SYSTEM_PASSWORD}
      DB_SYSTEM_NAME: ${DB_SYSTEM_NAME}
      # Data database connection (students, payments, etc)
      DB_DATA_HOST: db_data
      DB_DATA_USER: ${DB_DATA_USER}
      DB_DATA_PASSWORD: ${DB_DATA_PASSWORD}
      DB_DATA_NAME: ${DB_DATA_NAME}
      # Legacy env vars for backward compatibility (points to system db)
      DB_HOST: db_system
      DB_USER: ${DB_SYSTEM_USER}
      DB_PASSWORD: ${DB_SYSTEM_PASSWORD}
      DB_NAME: ${DB_SYSTEM_NAME}
    volumes:
      - storage:/app/storage
    ports:
      - "9002:9002"

  # Daily JSON backup of transactional data
  # Runs at 3 AM, keeps last 3 versions
  backup_data:
    image: postgres:16
    restart: "no"
    depends_on:
      db_data:
        condition: service_healthy
    environment:
      DB_DATA_HOST: db_data
      DB_DATA_USER: ${DB_DATA_USER}
      DB_DATA_PASSWORD: ${DB_DATA_PASSWORD}
      DB_DATA_NAME: ${DB_DATA_NAME}
    volumes:
      - storage:/backups
      - ./scripts/backup-data-json.sh:/backup-data-json.sh:ro
    command: >
      sh -c "
      apk add --no-cache bash &&
      chmod +x /backup-data-json.sh &&
      echo 'ðŸ“… Daily JSON backup service started. Will run at 3 AM';
      while true; do
        current_hour=$$(date +%H);
        if [ \"$$current_hour\" = \"03\" ]; then
          echo 'ðŸ“¦ Running daily JSON backup...';
          /backup-data-json.sh;
          sleep 3600;
        fi;
        sleep 60;
      done
      "

  # Weekly SQL backup of system data
  # Runs on Sundays at 3 AM, keeps last 3 versions
  backup_system:
    image: postgres:16
    restart: "no"
    depends_on:
      db_system:
        condition: service_healthy
    environment:
      DB_SYSTEM_HOST: db_system
      DB_SYSTEM_USER: ${DB_SYSTEM_USER}
      DB_SYSTEM_PASSWORD: ${DB_SYSTEM_PASSWORD}
      DB_SYSTEM_NAME: ${DB_SYSTEM_NAME}
    volumes:
      - storage:/backups
      - ./scripts/backup-system-sql.sh:/backup-system-sql.sh:ro
    command: >
      sh -c "
      apk add --no-cache bash &&
      chmod +x /backup-system-sql.sh &&
      echo 'ðŸ“… Weekly SQL backup service started. Will run on Sundays at 3 AM';
      while true; do
        current_hour=$$(date +%H);
        current_day=$$(date +%u);
        if [ \"$$current_hour\" = \"03\" ] && [ \"$$current_day\" = \"7\" ]; then
          echo 'ðŸ“¦ Running weekly SQL backup...';
          /backup-system-sql.sh;
          sleep 3600;
        fi;
        sleep 60;
      done
      "

volumes:
  db_system_data:
  db_data_data:
  storage:
