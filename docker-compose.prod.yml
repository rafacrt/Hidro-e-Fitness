services:
  db:
    image: postgres:16
    restart: unless-stopped
    environment:
      # Removidos valores padrÃ£o inseguros; obrigar definiÃ§Ã£o via env do Coolify
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 10

  hasura:
    image: hasura/graphql-engine:v2.38.0
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
      HASURA_GRAPHQL_ENABLE_CONSOLE: 'false'
      HASURA_GRAPHQL_DEV_MODE: 'false'
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, query-log
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_ADMIN_SECRET}
      HASURA_GRAPHQL_JWT_SECRET: >-
        {"type":"HS256","key":"${JWT_SECRET}"}
      HASURA_GRAPHQL_UNAUTHORIZED_ROLE: anonymous
    # Hasura interno apenas; sem bind externo para evitar conflito de porta

  app:
    build:
      context: .
      dockerfile: docker-config/Dockerfile
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      hasura:
        condition: service_started
    environment:
      NODE_ENV: production
      NEXT_TELEMETRY_DISABLED: '1'
      HASURA_GRAPHQL_ENDPOINT: http://hasura:8080/v1/graphql
      HASURA_ADMIN_SECRET: ${HASURA_ADMIN_SECRET}
      JWT_SECRET: ${JWT_SECRET}
      FILE_STORAGE_DIR: /app/storage
      DB_HOST: db
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
    volumes:
      - storage:/app/storage
    ports:
      - "9002:9002"

  # Backup automÃ¡tico do banco (roda diariamente Ã s 3h da manhÃ£)
  backup:
    image: postgres:16
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    environment:
      DB_HOST: db
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      BACKUP_RETENTION_DAYS: 7
    volumes:
      - storage:/backups
    command: >
      sh -c "
      echo 'Backup service started. Will run daily at 3 AM';
      while true; do
        current_hour=$$(date +%H);
        if [ \"$$current_hour\" = \"03\" ]; then
          echo 'ðŸ“¦ Running daily backup...';
          TIMESTAMP=$$(date +%Y%m%d_%H%M%S);
          PGPASSWORD=$$DB_PASSWORD pg_dump -h $$DB_HOST -U $$DB_USER -d $$DB_NAME --clean --if-exists > /backups/backup_$$TIMESTAMP.sql;
          gzip /backups/backup_$$TIMESTAMP.sql;
          echo 'âœ… Backup completed: backup_$$TIMESTAMP.sql.gz';
          find /backups -name 'backup_*.sql.gz' -mtime +$$BACKUP_RETENTION_DAYS -delete;
          echo 'ðŸ§¹ Old backups cleaned';
          sleep 3600;
        fi;
        sleep 60;
      done
      "

volumes:
  db_data:
  storage: