services:
  db:
    image: postgres:16
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./db/init-prod:/docker-entrypoint-initdb.d
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 20

  hasura:
    image: hasura/graphql-engine:v2.38.0
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_ADMIN_SECRET}
      HASURA_GRAPHQL_JWT_SECRET: >-
        {"type":"HS256","key":"${JWT_SECRET}"}
    ports:
      - "8080:8080"

  app:
    build:
      context: .
      dockerfile: docker-config/Dockerfile
    restart: unless-stopped
    depends_on:
      - hasura
      - db
    environment:
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
      - HASURA_GRAPHQL_ENDPOINT=http://hasura:8080/v1/graphql
      - HASURA_ADMIN_SECRET=${HASURA_ADMIN_SECRET}
      - JWT_SECRET=${JWT_SECRET}
      - FILE_STORAGE_DIR=/app/storage
      - DB_HOST=db
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_NAME=${POSTGRES_DB}
    volumes:
      - storage:/app/storage
    ports:
      - "9002:9002"

volumes:
  db_data:
  storage:
